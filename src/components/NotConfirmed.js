import React, { Component } from "react";import {View, Text, Image, TouchableOpacity, I18nManager, FlatList, Platform, Dimensions, ImageBackground, Animated,ScrollView} from "react-native";import {Container, Content, Icon, Header, List, Right, Left, Button, Item, Input} from 'native-base'import styles from '../../assets/styles'import i18n from '../../locale/i18n'import COLORS from '../../src/consts/colors'import { DoubleBounce } from 'react-native-loader';import FooterSection from './FooterSection';import RBSheet from "react-native-raw-bottom-sheet";import DrawerCustomization from '../routes/DrawerCustomization';import * as Animatable from 'react-native-animatable';import {connect} from "react-redux";const height 		= Dimensions.get('window').height;const width 		= Dimensions.get('window').width;const IS_IPHONE_X 	= height === 812 || height === 896;class NotConfirmed extends Component {	constructor(props){		super(props);		this.state={			status: null,			backgroundColor: new Animated.Value(0),			availabel: 0,			orderType:0		}	}	static navigationOptions = () => ({		drawerLabel: () => null	});	renderLoader(){		if (this.props.loader){			return(				<View style={{ alignItems: 'center', justifyContent: 'center', height: height , alignSelf:'center' , backgroundColor:'#fff' , width:'100%' , position:'absolute' , zIndex:1  }}>					<DoubleBounce size={20} color={COLORS.labelBackground} />				</View>			);		}	}	setAnimate(availabel){		if (availabel === 0){			Animated.timing(				this.state.backgroundColor,				{					toValue: 1,					duration: 1000,				},			).start();			this.setState({ availabel: 1 });		}else {			Animated.timing(				this.state.backgroundColor,				{					toValue: 0,					duration: 1000,				},			).start();			this.setState({ availabel: 0 });		}		console.log(availabel);	}	headerScrollingAnimation(e){		if (e.nativeEvent.contentOffset.y > 30){			console.log(e.nativeEvent.contentOffset.y);			this.setAnimate(0)		} else{			this.setAnimate(1)		}	}	closeDrawer(){		this.RBSheet.close()	}	render() {		const backgroundColor = this.state.backgroundColor.interpolate({			inputRange: [0, 1],			outputRange: ['rgba(0, 0, 0, 0)', '#00000099']		});		return (			<Container>				<Header style={[styles.header , styles.plateformMarginTop]} noShadow>					<Animated.View style={[styles.headerView  , styles.animatedHeader ,{ backgroundColor: backgroundColor}]}>						<Right style={styles.flex0}>							<Button transparent onPress={() => this.RBSheet.open()} style={styles.headerBtn}>								<Image source={require('../../assets/images/menu.png')} style={[styles.headerMenu , styles.transform]} resizeMode={'contain'} />							</Button>						</Right>						<Text style={[styles.headerText , styles.headerTitle]}>{ i18n.t('myOrders') }</Text>						<Left style={styles.flex0}/>					</Animated.View>				</Header>				<Content contentContainerStyle={styles.flexGrow} style={styles.homecontent}  onScroll={e => this.headerScrollingAnimation(e) }>					{ this.renderLoader() }					<ImageBackground source={  I18nManager.isRTL ? require('../../assets/images/bg_blue_big.png') : require('../../assets/images/bg_blue_big2.png')} resizeMode={'cover'} style={styles.imageBackground}>						<View style={{ width: width - 50, backgroundColor: '#fff', alignSelf: 'center', alignItems: 'center', marginTop: 70, height: height - 100, borderColor: '#ddd', borderWidth: 1 }}>							<Image source={require('../../assets/images/stopwatch_wait.png')} resizeMode={'contain'} style={{ justifyContent: 'center', alignSelf: 'center', width: 200, height: 200, marginTop: (height*20)/100 }} />							<Text style={[styles.type ,{color:COLORS.labelBackground, marginTop: 30, fontSize: 16, fontWeight: 'bold'}]}>{i18n.t('waitingAccept')}</Text>						</View>					</ImageBackground>				</Content>				{/*drawer content*/}				<RBSheet					ref={ref => {						this.RBSheet = ref;					}}					height={400}					duration={350}					customStyles={{						container: styles.drawerCont					}}				>					<DrawerCustomization routeName={'myOrders'} onClose={() => this.closeDrawer()} navigation={this.props.navigation}/>				</RBSheet>			</Container>		);	}}export default NotConfirmed;